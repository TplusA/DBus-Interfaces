<!DOCTYPE node PUBLIC "-//freedesktop//DTD D-BUS Object Introspection 1.0//EN"
 "http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd">
<node name="/de/tahifi/sources">
    <interface name="de.tahifi.AudioPath.Appliance">
        <!--
        Tell the daemon whether or not the appliance is ready for playback.

        The ready-state is derived from the audio path state and the power
        state. Note that these two states are independent of each other. It is
        possible for an appliance to be in standby mode, but with a fully
        configured audio path lingering in the background. Similarly, it may
        also be powered on, but the audio path may not be ready yet.

        The distinction is important because the daemon needs to know if an
        audio source request can be deferred or if pending requests must be
        canceled.

        \param arg_audio_state
            Appliance's sound system state (0 = unknown, 1 = not ready,
            2 = ready).

        \param arg_power_state
            Appliance's power state (0 = unknown, 1 = suspended, 2 = powered).

        \param proxy, cancellable, error
            GDBus clutter.
        -->
        <method name="SetReadyState">
            <arg name="audio_state" type="y" direction="in"/>
            <arg name="power_state" type="y" direction="in"/>
        </method>

        <!--
        Check what the daemon thinks the appliance's sound system state is.

        See \c de.tahifi.AudioPath.Appliance.SetReadyState() for how to
        interpret the value of the returned state.
        -->
        <method name="GetState">
            <arg name="state" type="y" direction="out"/>
        </method>
    </interface>

    <interface name="de.tahifi.AudioPath.Manager">
        <!--
        Register an audio player.

        \param arg_player_id
            Unique ID of the audio player.

        \param arg_player_name
            Descriptive name of the audio player.

        \param arg_path
            D-Bus object path to the player's \c de.tahifi.AudioPath.Player
            implementation.

        \param proxy, cancellable, error
            GDBus clutter.
        -->
        <method name="RegisterPlayer">
            <arg name="player_id" type="s" direction="in"/>
            <arg name="player_name" type="s" direction="in"/>
            <arg name="path" type="o" direction="in"/>
        </method>

        <!--
        Register an audio source.

        \param arg_source_id
            Unique ID of the audio source.

        \param arg_source_name
            Descriptive name of the audio source.

        \param arg_player_id
            ID of the player responsible for this source. Note that it is
            possible to register sources before the corresponding player has
            registered. This allows for lose coupling and faster system
            startup, but requesting the source will fail as long as the player
            hasn't registered yet.

        \param arg_path
            D-Bus object path to the source's \c de.tahifi.AudioPath.Source
            implementation.

        \param proxy, cancellable, error
            GDBus clutter.
        -->
        <method name="RegisterSource">
            <arg name="source_id" type="s" direction="in"/>
            <arg name="source_name" type="s" direction="in"/>
            <arg name="player_id" type="s" direction="in"/>
            <arg name="path" type="o" direction="in"/>
        </method>

        <!--
        Request to activate the player responsible for the given source.

        This method should not be called synchronously because the callee needs
        to take some actions to actually switch sources and players. In case
        the caller is also the registered source, then it may ignore the
        (asynchronously delivered) return values and just rely on its
        implementation of the \c de.tahifi.AudioPath.Source interface.

        A source cannot be requested in case the corresponding player hasn't
        registered yet. In this case, the D-Bus call will fail. The caller may
        want to wait for the \c de.tahifi.AudioPath.Manager.PlayerRegistered
        signal before requesting a source.

        \param arg_source_id
            Non-empty ID of the source that wants to play.

        \param arg_request_data
            Possibly empty data for the source request. This can be any extra
            data which may take an influence on how the audio path is switched.

        \param out_player_id
            ID of the player that was activated.

        \param out_switched
            True in case the player has been switched to, false in case the
            player was active already.

        \param proxy, cancellable, error
            GDBus clutter.
        -->
        <method name="RequestSource">
            <arg name="source_id" type="s" direction="in"/>
            <arg name="request_data" type="a{sv}" direction="in">
                <mock_check_fn name="MockDBusUtils::expect_dictionary"/>
            </arg>
            <arg name="player_id" type="s" direction="out"/>
            <arg name="switched" type="b" direction="out"/>
        </method>

        <!--
        Request to shut down the current audio path.

        This method requests to disassociate the currently selected source from
        its player.

        The player may remain active. In this case, the player may continue
        playing if not taken care of otherwise. It is the application's
        responsibility to stop the player in this case if and when required.

        \param arg_deactivate_player
            True in case any active player should be deactivated (even in case
            no source is selected), false otherwise.

        \param arg_request_data
            Possibly empty data for the deactivation request. This can be any
            extra data which may take an influence on how the audio path is
            shut down.

        \param proxy, cancellable, error
            GDBus clutter.
        -->
        <method name="ReleasePath">
            <arg name="deactivate_player" type="b" direction="in"/>
            <arg name="request_data" type="a{sv}" direction="in">
                <mock_check_fn name="MockDBusUtils::expect_dictionary"/>
            </arg>
        </method>

        <!--
        Check which player is currently active.

        \param arg_source_id
            Optional source ID for checking if the currently active player is
            correct for the given source. Pass empty string to just find out
            the player, regardless of source.

        \param out_player_id
            Name of the currently active player, empty if none. In case the
            source ID is non-empty and the currently active player is not
            responsible for the given source ID, then the returned player ID
            will be empty (which does \e not mean that no player is active).

        \param proxy, cancellable, error
            GDBus clutter.
        -->
        <method name="GetActivePlayer">
            <arg name="source_id" type="s" direction="in"/>
            <arg name="player_id" type="s" direction="out"/>
        </method>

        <!--
        Retrieve all registered audio paths.

        This method returns quickly, so it is usually safe to call
        synchronously.

        \param out_usable
            Array of tuples of source ID and player ID. This array contains all
            audio paths that are readily usable.
        \param out_incomplete
            Like \p out_usable, but the audio paths returned in this parameter
            are still incomplete and therefore not usable. Note that the source
            ID may be empty, indicating players for which no source has been
            registered yet.

        \param proxy, cancellable, error
            GDBus clutter.
        -->
        <method name="GetPaths">
            <arg name="usable" type="a(ss)" direction="out"/>
            <arg name="incomplete" type="a(ss)" direction="out"/>
        </method>

        <!--
        Retrieve current audio path.

        This method returns quickly, so it is usually safe to call
        synchronously.

        \param out_source_id, out_player_id
            The current path. Note that the path might be empty or incomplete.

        \param proxy, cancellable, error
            GDBus clutter.
        -->
        <method name="GetCurrentPath">
            <arg name="source_id" type="s" direction="out"/>
            <arg name="player_id" type="s" direction="out"/>
        </method>

        <!--
        Retrieve information about a registered player.

        This method returns quickly, so it is usually safe to call
        synchronously.
        -->
        <method name="GetPlayerInfo">
            <arg name="player_id" type="s" direction="in"/>
            <arg name="player_name" type="s" direction="out"/>
            <arg name="dbusname" type="s" direction="out"/>
            <arg name="dbuspath" type="o" direction="out"/>
        </method>

        <!--
        Retrieve information about a registered audio source.

        This method returns quickly, so it is usually safe to call
        synchronously.
        -->
        <method name="GetSourceInfo">
            <arg name="source_id" type="s" direction="in"/>
            <arg name="source_name" type="s" direction="out"/>
            <arg name="player_id" type="s" direction="out"/>
            <arg name="dbusname" type="s" direction="out"/>
            <arg name="dbuspath" type="o" direction="out"/>
        </method>

        <!--
        Signal emitted after a player has registered.
        -->
        <signal name="PlayerRegistered">
            <arg name="player_id" type="s"/>
            <arg name="player_name" type="s"/>
        </signal>

        <!--
        Signal emitted when a new, usable audio path is available.

        An audio path is usable if both, an audio source and its associated
        player, have registered with the audio path manager.
        -->
        <signal name="PathAvailable">
            <arg name="source_id" type="s"/>
            <arg name="player_id" type="s"/>
        </signal>

        <!--
        Signal emitted when an audio path is about to be activated.

        The audio path has been established and the player is ready to go when
        this signal is emitted. However, the player is not yet allowed to play
        because the appliance has told us that it is currently not ready to
        produce any sound. Thus, the audio path is deferred.

        The \c de.tahifi.AudioPath.Manager.PathActivated signal is to be
        expected next (unless another audio path is activated in the meantime).
        The \c de.tahifi.AudioPath.Manager.PathDeferred signal is emitted only
        in case the use of the audio path has really been deferred, otherwise
        the signal emission is omitted.

        \param arg_source_id
            ID of the selected source, empty in case no source is selected
            anymore. There might still be an active player in the latter case.

        \param arg_player_id
            ID of the active player, empty in case no player is active. An
            empty player ID implies an empty source ID (but not the other way
            around).

        \param object
            GDBus clutter.
        -->
        <signal name="PathDeferred">
            <arg name="source_id" type="s"/>
            <arg name="player_id" type="s"/>
        </signal>

        <!--
        Signal emitted after an audio path has been activated.

        The audio path has been established and allowed to be used. The player
        is allowed to play when this signal is emitted.

        \param arg_source_id
            ID of the selected source, empty in case no source is selected
            anymore. There might still be an active player in the latter case.

        \param arg_player_id
            ID of the active player, empty in case no player is active. An
            empty player ID implies an empty source ID (but not the other way
            around).

        \param arg_request_data
            Possibly empty data passed to the audio source request.

        \param object
            GDBus clutter.
        -->
        <signal name="PathActivated">
            <arg name="source_id" type="s"/>
            <arg name="player_id" type="s"/>
            <arg name="request_data" type="a{sv}">
                <mock_check_fn name="MockDBusUtils::expect_dictionary"/>
            </arg>
        </signal>

        <!--
        Signal emitted after an audio path has been activated again.

        When the active audio path is requested again, then nothing really
        happens. In this case, this signal is emitted to let every process in
        the system know that the audio path has been selected again. The
        primarily intention behind this is to propagate the extra request data
        which have been passed to the request.

        \param arg_source_id, arg_player_id
            The active audio path.

        \param arg_request_data
            Possibly empty data passed to the audio source request.

        \param object
            GDBus clutter.
        -->
        <signal name="PathReactivated">
            <arg name="source_id" type="s"/>
            <arg name="player_id" type="s"/>
            <arg name="request_data" type="a{sv}">
                <mock_check_fn name="MockDBusUtils::expect_dictionary"/>
            </arg>
        </signal>
    </interface>

    <interface name="de.tahifi.AudioPath.Source">
        <!--
        Called when the audio source has been selected, but is not allowed to
        start producing any sound just yet.

        The audio source is thus in a "half selected" state. The audio path has
        been established, logically, but may not be used for playback yet. From
        the view of an external observer, the audio path can be considered
        "done" as far as the Streaming Board is concerned. From the view of the
        audio path, it cannot be used yet because it is not allowed to.

        See also \c de.tahifi.AudioPath.Manager.PathDeferred.
        -->
        <method name="SelectedOnHold">
            <arg name="source_id" type="s" direction="in"/>
            <arg name="request_data" type="a{sv}" direction="in">
                <mock_check_fn name="MockDBusUtils::expect_dictionary"/>
            </arg>
        </method>

        <!--
        Called when the source has been selected.

        The corresponding player will be active by the time this method is
        called. In case there is only a single source managed by the
        implementation of this interface, the \p arg_source_id parameter may be
        safely ignored.
        -->
        <method name="Selected">
            <arg name="source_id" type="s" direction="in"/>
            <arg name="request_data" type="a{sv}" direction="in">
                <mock_check_fn name="MockDBusUtils::expect_dictionary"/>
            </arg>
        </method>

        <!--
        Called when the source has been deselected.

        The active player may have switched by the time this method is called.
        In case there is only a single source managed by the implementation of
        this interface, the \p arg_source_id parameter may be safely ignored.
        -->
        <method name="Deselected">
            <arg name="source_id" type="s" direction="in"/>
            <arg name="request_data" type="a{sv}" direction="in">
                <mock_check_fn name="MockDBusUtils::expect_dictionary"/>
            </arg>
        </method>
    </interface>

    <interface name="de.tahifi.AudioPath.Player">
        <!--
        Called when the player is pronounced the active one.

        As long as the player is active, it is allowed to bind exclusively to
        the audio device.
        -->
        <method name="Activate">
            <arg name="request_data" type="a{sv}" direction="in">
                <mock_check_fn name="MockDBusUtils::expect_dictionary"/>
            </arg>
        </method>

        <!--
        Called to deactivate the player.

        The player must stop audio playback and release the audio device when
        this method is invoked. The audio device must have been released by the
        time this method returns.

        The player must not claim the audio device while not active and it must
        reject any play or queue requests while in non-active state.
        -->
        <method name="Deactivate">
            <arg name="request_data" type="a{sv}" direction="in">
                <mock_check_fn name="MockDBusUtils::expect_dictionary"/>
            </arg>
        </method>
    </interface>
</node>
