<!DOCTYPE node PUBLIC "-//freedesktop//DTD D-BUS Object Introspection 1.0//EN"
 "http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd">
<node name="/de/tahifi/airable">
    <interface name="de.tahifi.Airable">
        <!--
        Retrieve URL of root directory hosted at Airable.
        -->
        <method name="GetRootURL">
            <arg name="url" type="s" direction="out"/>
        </method>

        <!--
        Follow Airable link, return URL the link redirects to.

        \param arg_redirect
            URL of an Airable redirect.
        \param out_error_code
            The D-Bus method returns an error code to the caller. Check file
            de_tahifi_lists_errors.h or de_tahifi_lists_errors.hh for possible
            values and their documentation.
        \param out_url
            The URL the redirect points to.
        \param proxy, cancellable, error GDBus clutter.
        -->
        <method name="ResolveRedirect">
            <arg name="redirect" type="s" direction="in"/>
            <arg name="error_code" type="y" direction="out"/>
            <arg name="url" type="s" direction="out"/>
        </method>

        <!--
        Get URL to be used for authentication with Airable.

        The URL will contain, among others, a signature that was computed from
        the secret key, a random salt, and other data. It should point to a
        JSON object that contains the session access token and the server time.
        These are to be used to generate access passwords.
        -->
        <method name="GenerateAuthenticationURL">
            <arg name="client_locale" type="s" direction="in"/>
            <arg name="url" type="s" direction="out"/>
        </method>

        <!--
        Generate password based on given session token and server time.

        The password is computed from the given data and the secret key.
        -->
        <method name="GeneratePassword">
            <arg name="token" type="s" direction="in"/>
            <arg name="timestamp" type="s" direction="in"/>
            <arg name="password" type="s" direction="out"/>
        </method>

        <!--
        Ask list broker to logout from given service using the given URL.

        Note that this function only triggers logging out from the service, and
        only if \p is_request is true. The Airable list broker will do this in
        the background to avoid blocking the caller for a long time if called
        synchronously. Service login status changes and associated errors are
        communicated through the \c ExternalServiceLoginStatus signal.
        -->
        <method name="ExternalServiceLogout">
            <arg name="service_id" type="s" direction="in"/>
            <arg name="url" type="s" direction="in"/>
            <arg name="is_request" type="b" direction="in"/>
            <arg name="actor_id" type="y" direction="in"/>
        </method>

        <!--
        Ask list broker to login to given service using stored credentials.

        Note that this function only triggers logging into the service, and
        only if \p is_request is true. The Airable list broker will do this in
        the background to avoid blocking the caller for a long time if called
        synchronously. Service login status changes and associated errors are
        communicated through the \c ExternalServiceLoginStatus signal.
        -->
        <method name="ExternalServiceLogin">
            <arg name="service_id" type="s" direction="in"/>
            <arg name="username" type="s" direction="in"/>
            <arg name="is_request" type="b" direction="in"/>
            <arg name="actor_id" type="y" direction="in"/>
        </method>

        <!--
        Inform system about changes of the user's service login status.

        This signal enables keeping the user's login status in sync with the
        smartphone app. If the user logs out on the smartphone, then the device
        shall do the same. If the user logs out on the device, then the app
        shall do the same. If the user logs in on the smartphone or on device,
        then the device or smartphone is informed about it.

        Note that the primary goal here is to put the user into the focus of
        action, not the individual devices. If the user logs in or out, then
        all involved devices should follow, not the other way around.

        \param arg_service_id
            String ID of the external service such as \c tidal.

        \param arg_actor_id
            ID of the actor that initiated the change of login status.

        \param arg_log_in
            True if the user has logged in (or tried to), false if the user has
            logged out (or tried to).

        \param arg_failed
            True if an attempt to log in or out has failed.

        \param arg_info
            Additional information about the log in or log out action. In case
            of login, this string will be the user name that was used to log
            into the service. In case of logout, this string will be the URL of
            the logout button to simplify logout action on the other end.

        \param object
            GDBus clutter.
        -->
        <signal name="ExternalServiceLoginStatus">
            <arg name="service_id" type="s"/>
            <arg name="actor_id" type="y"/>
            <arg name="log_in" type="b"/>
            <arg name="failed" type="b"/>
            <arg name="info" type="s"/>
        </signal>
    </interface>
</node>
