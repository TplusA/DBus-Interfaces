<!DOCTYPE node PUBLIC "-//freedesktop//DTD D-BUS Object Introspection 1.0//EN"
 "http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd">
<node name="/de/tahifi/streamplayer">
    <interface name="de.tahifi.Streamplayer.URLFIFO">
        <method name="Clear">
            <arg name="keep_first_n_entries" type="n" direction="in"/>
            <arg name="playing_id" type="u" direction="out"/>
            <arg name="queued_ids" type="aq" direction="out"/>
            <arg name="removed_ids" type="aq" direction="out"/>
        </method>
        <method name="Next">
            <arg name="skipped_id" type="u" direction="out"/>
            <arg name="next_id" type="u" direction="out"/>
            <arg name="play_status" type="y" direction="out"/>
        </method>

        <!--
        Append stream to player's internal queue.

        \param arg_stream_id
            ID of the stream.

        \param arg_audio_source
            ID of the audio source the stream belongs to. This string may be
            left empty in case the audio source is unknown or not important.
            In case of StrBo links, the player might be able to figure out
            the audio source by itself.

        \param arg_stream_urls
            A ranked array of pairs of URI and flag. The URI can be a plain URI
            (in which case its flag must be \c false), or an Airable link the
            player needs to resolve before it can be played (in which case its
            flag must be \c true).

        \param arg_stream_key
            Stream key, a stable identifier for the stream (primarily used for
            the cover art cache).

        \param arg_start_position, arg_start_units, arg_stop_position, arg_stop_units
            At which timestamp to start and stop playing. Not all audio sources
            support seeking, in which case these parameters will be ignored.

        \param arg_keep_first_n_entries
            How many items to keep in the queue. If set to 0, then the whole
            queue will be cleared before adding the new stream. If set to -1,
            the queue will remain untouched.

        \param arg_meta_data
            The meta data already known at the time the stream is pushed to
            the player queue. These data may be overridden by any meta data
            extracted later from the stream when it is playing.

        \param out_fifo_overflow
            True if the stream was rejected because the player's queue is
            full.

        \param out_is_playing
            True if the player is currently playing. Can be used to detect
            inconsistencies between player and client, i.e., bugs.

        \param out_dropped_ids_before, out_dropped_ids_now
            Arrays of stream IDs dropped from the internal queue. Used for
            synchronization between player control and player. The latter array
            is the list of IDs dropped because of this \c Push command.

        \param proxy, cancellable, error
            GDBus clutter.
        -->
        <method name="Push">
            <arg name="stream_id" type="q" direction="in"/>
            <arg name="audio_source" type="s" direction="in"/>
            <arg name="stream_urls" type="a(sb)" direction="in">
                <mock_check_fn name="MockDBusUtils::expect_pushed_stream_uris"/>
            </arg>
            <arg name="stream_key" type="ay" direction="in">
                <annotation name="org.gtk.GDBus.C.ForceGVariant" value="arg"/>
                <mock_check_fn name="MockDBusUtils::expect_byte_array"/>
            </arg>
            <arg name="start_position" type="x" direction="in"/>
            <arg name="start_units" type="s" direction="in"/>
            <arg name="stop_position" type="x" direction="in"/>
            <arg name="stop_units" type="s" direction="in"/>
            <arg name="keep_first_n_entries" type="n" direction="in"/>
            <arg name="meta_data" type="a(ss)" direction="in">
                <mock_check_fn name="MockDBusUtils::expect_meta_data"/>
            </arg>
            <arg name="fifo_overflow" type="b" direction="out"/>
            <arg name="is_playing" type="b" direction="out"/>
            <arg name="dropped_ids_before" type="aq" direction="out">
                <mock_check_fn name="MockDBusUtils::expect_dropped_stream_ids"/>
            </arg>
            <arg name="dropped_ids_now" type="aq" direction="out">
                <mock_check_fn name="MockDBusUtils::expect_dropped_stream_ids"/>
            </arg>
        </method>

        <!--
        Append multiple streams to the queue. Use this method for prefilling
        the queue with a single method invocation, i.e., if you already have
        a list of streams. Prefer simple \c Push calls for adding single
        streams (for instance when discovering new streams while traversing a
        directory structure).

        \param arg_items
            Array of items to push to the queue. Each item consists of stream
            ID, audio source ID, array of stream URLs, stream key (as
            variant type), start position and units, stop position and units,
            and array of meta data. See \c Push for details.

        \param arg_audio_source
            ID of the audio source the streams belong to. There is a
            corresponding field in \p arg_items for this as well to enable
            transmission of per-stream audio source information, which will
            be filled in by this value if left empty. This string may be left
            empty in case the audio source is unknown or not important, or
            if all streams in \p arg_items have their own audio source ID.

        \param arg_keep_first_n_entries
            How many items to keep in the queue. If set to 0, then the whole
            queue will be cleared before adding the new streams. If set to -1,
            the queue will remain untouched.

        \param out_accepted
            Number of items copied into the queue. If this number is smaller
            than the number of items sent, then only the head item elements
            have been copied, and the tail elements were rejected because the
            player's queue is full. The rejected items must be sent again
            later when the queue empties (so avoid excessive D-Bus traffic by
            \e not sending hundreds of items at once, and try to match the
            number of items to the estimated number of free slots).

        \param out_free_slots
            Number of free slots in the player's queue.

        \param out_is_playing
            True if the player is currently playing. Can be used to detect
            inconsistencies between player and client, i.e., bugs.

        \param out_dropped_ids_before, out_dropped_ids_now
            Arrays of stream IDs dropped from the internal queue. Used for
            synchronization between player control and player. The latter array
            is the list of IDs dropped because of this \c PushMulti command.

        \param proxy, cancellable, error
            GDBus clutter.
        -->
        <method name="PushMulti">
            <arg name="items" type="a(qsa(sb)vxsxsa(ss))" direction="in">
                <mock_check_fn name="MockDBusUtils::expect_push_multiple_streams"/>
            </arg>
            <arg name="audio_source" type="s" direction="in"/>
            <arg name="keep_first_n_entries" type="n" direction="in"/>
            <arg name="accepted" type="u" direction="out"/>
            <arg name="free_slots" type="u" direction="out"/>
            <arg name="is_playing" type="b" direction="out"/>
            <arg name="dropped_ids_before" type="aq" direction="out">
                <mock_check_fn name="MockDBusUtils::expect_dropped_stream_ids"/>
            </arg>
            <arg name="dropped_ids_now" type="aq" direction="out">
                <mock_check_fn name="MockDBusUtils::expect_dropped_stream_ids"/>
            </arg>
        </method>

        <!--
        Check if given stream is playable.

        This method can be used to weed out unplayable streams early, or to
        find the first playable stream without having to go through the
        player's gapless queue. Note that the player will probe each stream
        anyway and drop unplayable ones as early as possible. Use manual
        stream probing only for special cases such as searching for a good
        stream when skipping over a stretch of unplayable streams.

        The method may be called at any time, even while the player is
        playing. The method will run at very low priority so that system
        overload by stream probing, and thus stuttering or bad response times,
        is avoided as much as possible.

        \param arg_stream_urls
            Collection URIs belonging to the same logical stream.
            See \p arg_stream_urls in \c de.tahifi.Streamplayer.URLFIFO.Push.

        \param out_cookie
            Returns 0 if the result is valid, otherwise the result must be
            retrieved by this cookie with a call of
            \c de.tahifi.Streamplayer.URLFIFO.ProbeByCookie after
            \c de.tahifi.Streamplayer.URLFIFO.DataAvailable or
            \c de.tahifi.Streamplayer.URLFIFO.DataError have been emitted.

        \param out_fail_reason
            If this array is empty, then at least one of the given URIs can be
            played; otherwise, each entry in the array contains the reason why
            the corresponding URL cannot be played (frequently, all of them
            will be the same).

            Note that probing stops at the first successful URI, in which case
            no fail reasons are returned. That is, the array is always either
            empty, or contains as many entries as \p arg_stream_urls.
        -->
        <method name="Probe">
            <arg name="stream_urls" type="a(sb)" direction="in">
                <mock_check_fn name="MockDBusUtils::expect_pushed_stream_uris"/>
            </arg>
            <arg name="cookie" type="u" direction="out"/>
            <arg name="fail_reasons" type="as" direction="out">
                <annotation name="org.gtk.GDBus.C.ForceGVariant" value="arg"/>
            </arg>
        </method>

        <!--
        Retrieval of \c de.tahifi.Streamplayer.URLFIFO.Probe results.
        -->
        <method name="ProbeByCookie">
            <arg name="cookie" type="u" direction="in"/>
            <arg name="fail_reasons" type="as" direction="out">
                <annotation name="org.gtk.GDBus.C.ForceGVariant" value="arg"/>
            </arg>
        </method>

        <!--
        Emitted when the player has removed a stream from the queue before it
        started playing.

        The player may probe all queued streams in the background while playing
        some other stream. In case it finds out that a queued stream cannot be
        played, it removes the stream and emits this signal.

        This signal does not affect play state in any way. It is strictly
        related to queue management. This means that all sorts of errors can
        still be thrown for any playing stream.

        \param arg_id
            ID of the stream this signal refers to.

        \param arg_reason
            String ID of a reason why the stream was dropped. The possible
            values are the same as those for the \p arg_reason parameter passed
            to the \c de.tahifi.Streamplayer.Playback.StoppedWithError signal.

        \param object
            GDBus clutter.
        -->
        <signal name="Dropped">
            <arg name="id" type="q"/>
            <arg name="reason" type="s"/>
        </signal>

        <!--
        Report availability of requested data.

        Multiple requests may complete at roughly the same time, and their
        completion may be collectively reported in a single signal. The data
        cookies may be used to retrieve the associated results.
        -->
        <signal name="DataAvailable">
            <arg name="cookies" type="au"/>
        </signal>

        <!--
        Report error for requested data.

        Multiple requests may error out at roughly the same time (think network
        trouble), and their errors may be collectively reported in a single
        signal. The data cookies sent along are invalidated by this signal.
        -->
        <signal name="DataError">
            <arg name="errors" type="a(uy)"/>
        </signal>
    </interface>

    <interface name="de.tahifi.Streamplayer.Playback">
        <method name="Start">
            <arg name="reason" type="s"/>
        </method>
        <method name="Stop">
            <arg name="reason" type="s"/>
        </method>
        <method name="Pause">
            <arg name="reason" type="s"/>
        </method>

        <!--
        Set absolute stream position.

        Seeking will stop fast forward/rewind mode and revert the stream to
        regular playback/pause mode.

        \param arg_position
            The position as raw value, relative to the beginning of the
            currently playing stream.

        \param arg_position_units
            The units \p arg_position is given in. Supported units are "s" for
            seconds, "ms" for milliseconds, "us" for microseconds, "ns" for
            nanoseconds, and "%" for percentage between start and end of stream
            (in this case, \p arg_position is a value between 0 and 1000000 to
            encode 0.0000 through 100.0000 percent).

        \param proxy, cancellable, error
            GDBus clutter.
        -->
        <method name="Seek">
            <arg name="position" type="x" direction="in"/>
            <arg name="position_units" type="s" direction="in"/>
        </method>

        <!--
        Jump to next track.

        Note that this is \e not a queue/URL FIFO command. Rather, this is a
        command directed at players that maintain their own playlists. Those
        that rely on external playlists should ignore this command.

        \see
            \c de.tahifi.Streamplayer.Playback.SkipToPrevious
        -->
        <method name="SkipToNext"/>

        <!--
        Jump to previous track.

        Note that this is \e not a queue/URL FIFO command. Rather, this is a
        command directed at players that maintain their own playlists. Those
        that rely on external playlists should ignore this command.

        \see
            \c de.tahifi.Streamplayer.Playback.SkipToNext
        -->
        <method name="SkipToPrevious"/>

        <!--
        Fast forward or fast rewind.

        \param arg_speed_factor
            Pass positive values for faster/slower playback in forward
            direction. Pass negative values for faster/slower playback in
            reverse direction. Pass zero to stop fast winding and revert to
            regular play or pause state. Value 1.0 is interpreted as zero and
            thus stops fast winding as well.

        \param proxy, cancellable, error
            GDBus clutter.
        -->
        <method name="SetSpeed">
            <arg name="speed_factor" type="d" direction="in"/>
        </method>

        <!--
        Set specific repeat mode or toggle.

        Valid modes are "off", "one", and "all". Pass the special value
        "toggle" to activate the "next" repeat mode.

        Note that this is \e not a queue/URL FIFO command. Rather, this is a
        command directed at players that maintain their own playlists. Those
        that rely on external playlists should ignore this command.
        -->
        <method name="SetRepeatMode">
            <arg name="mode" type="s" direction="in"/>
        </method>

        <!--
        Set specific shuffle mode or toggle.

        Valid modes are "off" and "on". Pass the special value "toggle" to
        activate the "next" shuffle mode.

        Note that this is \e not a queue/URL FIFO command. Rather, this is a
        command directed at players that maintain their own playlists. Those
        that rely on external playlists should ignore this command.
        -->
        <method name="SetShuffleMode">
            <arg name="mode" type="s" direction="in"/>
        </method>

        <!--
        Emitted when a new stream has just started playing.

        This signal is emitted for newly started streams. Pause state is
        communicated using the orthogonal \c PauseState signal.

        \param arg_id
            ID of the stream this signal refers to. The stream ID is a
            temporary identifier that refers to the action of playing a stream.
            Playing the same stream twice in a row results in two different
            stream IDs being emitted.

        \param arg_stream_key
            Stream key of the playing stream. This is supposed to be a stable
            identifier that refers to the stream as a source.

        \param arg_audio_source
            ID of the audio source the stream belongs to. This string will
            be empty in case the audio source is unknown.

        \param arg_url
            URL of the stream that is now playing.

        \param arg_url_fifo_is_full
            Whether or not the URL FIFO is full. Clients that push URLs to the
            FIFO as a reaction to this signal should check this flag before
            trying to send new URLs to avoid needless D-Bus traffic.

        \param arg_dropped_ids
            An array of stream IDs dropped from the internal queue. Used for
            synchronization between player control and player.

        \param arg_meta_data
            The meta data known so far as an unsorted array of key/value pairs.

        \param object
            GDBus clutter.
        -->
        <signal name="NowPlaying">
            <arg name="id" type="q"/>
            <arg name="stream_key" type="ay">
                <annotation name="org.gtk.GDBus.C.ForceGVariant" value="arg"/>
            </arg>
            <arg name="audio_source" type="s"/>
            <arg name="url" type="s"/>
            <arg name="url_fifo_is_full" type="b"/>
            <arg name="dropped_ids" type="aq"/>
            <arg name="meta_data" type="a(ss)"/>
        </signal>

        <!--
        Emitted when a queued stream could not be played.

        The player has stopped when this message is received. The failed stream
        will have been removed from the queue, but otherwise it will be left
        untouched. This is because the best strategy to recover from this
        condition depends on user context. The player cannot really tell all by
        itself which error recovery strategy would make most sense, so it
        doesn't even try.

        This signal's parameters are a bit like those of \c NowPlaying, but for
        case of failure. User interfaces should track both, \c NowPlaying and
        \c StoppedWithError, to keep their playlist and meta data management up
        to date. It also should tell the player what to do so that the system
        can recover from this error.

        \param arg_id
            ID of the failed stream this signal refers to.

        \param arg_url
            URL of the stream that failed playing.

        \param arg_url_fifo_is_empty
            Whether or not the URL FIFO is empty. Clients can use this
            information to recover from a stopped stream player in a meaningful
            way (e.g., just try next queued stream, push the next entry from a
            playlist, or refrain from doing so).

        \param arg_dropped_ids
            An array of stream IDs dropped from the internal queue. Used for
            synchronization between player control and player.

        \param arg_reason
            String ID of a reason why the stream failed playing. This string
            must never be empty.

        \param object
            GDBus clutter.
        -->
        <signal name="StoppedWithError">
            <arg name="id" type="q"/>
            <arg name="url" type="s"/>
            <arg name="url_fifo_is_empty" type="b"/>
            <arg name="dropped_ids" type="aq"/>
            <arg name="reason" type="s"/>
        </signal>

        <!--
        Emitted when a stream has just stopped playing (not paused).
        -->
        <signal name="Stopped">
            <arg name="id" type="q"/>
            <arg name="dropped_ids" type="aq"/>
        </signal>

        <!--
        Emitted when a stream has just been paused (not stopped) or continued.
        -->
        <signal name="PauseState">
            <arg name="id" type="q"/>
            <arg name="is_paused" type="b"/>
        </signal>

        <!--
        Emitted when new meta data have been extracted from the stream itself.

        This signal always sends all collected meta data, not just a delta.
        This approach typically does not consume much more D-Bus bandwidth, but
        significantly reduces complexity of signal handler code.

        \param arg_id
            ID of the stream this signal refers to.

        \param arg_meta_data
            The meta data themselves as an unsorted array of key/value pairs.

        \param object
            GDBus clutter.
        -->
        <signal name="MetaDataChanged">
            <arg name="id" type="q"/>
            <arg name="meta_data" type="a(ss)"/>
        </signal>

        <!--
        Emitted when the temporal position in the stream has changed.

        This signal is usually emitted once per second.

        \param arg_id
            ID of the stream this signal refers to.

        \param arg_position, arg_position_units
            Current position and the unit the position is measured in.

        \param arg_duration, arg_duration_units
            Total length of the stream and the unit the length is measured in.
            If the total length is unknown, then \p arg_duration is set to -1.

        \param object
            GDBus clutter.
        -->
        <signal name="PositionChanged">
            <arg name="id" type="q"/>
            <arg name="position" type="x" direction="out"/>
            <arg name="position_units" type="s" direction="out"/>
            <arg name="duration" type="x" direction="out"/>
            <arg name="duration_units" type="s" direction="out"/>
        </signal>

        <!--
        Emitted when the playback speed of the stream has changed.
        -->
        <signal name="SpeedChanged">
            <arg name="id" type="q"/>
            <arg name="speed_factor" type="d"/>
        </signal>

        <!--
        Emitted when the playback mode has changed.

        The two modes "repeat" and "shuffle" are always emitted together in a
        single signal so that glitches are avoided. Some players may not like
        the idea of having a repeat-one mode combined with shuffle mode, so
        they may switch shuffle off the instant repeat-one is activated. They
        may also switch shuffle on again when selecting a different repeat
        mode.

        Note that this signal is only emitted by players that maintain their
        own playlists. In particular, the T+A streamplayer does not emit these
        signals since the UI is managing the playlists, and the UI does not
        emit these signals either.

        See \c de.tahifi.Streamplayer.Playback.SetRepeatMode and
        rc de.tahifi.Streamplayer.Playback.SetShuffleMode for valid mode names.
        -->
        <signal name="PlaybackModeChanged">
            <arg name="repeat" type="s" direction="out"/>
            <arg name="shuffle" type="s" direction="out"/>
        </signal>

        <signal name="Buffer">
            <arg name="fill_level" type="y"/>
            <arg name="cumulating" type="b"/>
        </signal>

        <method name="InjectStreamFailure">
            <arg name="domain" type="s" direction="in"/>
            <arg name="code" type="u" direction="in"/>
        </method>
    </interface>
</node>
