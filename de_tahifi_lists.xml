<!DOCTYPE node PUBLIC "-//freedesktop//DTD D-BUS Object Introspection 1.0//EN"
 "http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd">
<node name="/de/tahifi/lists">
    <interface name="de.tahifi.Lists.Navigation">
        <!--
        Retrieve a list of contexts known by the list broker.

        List entries always appear in some "context". Each context is
        associated with a unique, short string identifier that clearly defines
        the meaning of the context. These string identifiers are compatible
        with the category identifiers returned by
        \c de.tahifi.Credentials.Read.GetKnownCategories(). In general, the set
        of contexts will be a superset of the set of categories.

        Context information is frequently used, so to keep D-Bus messages
        small, each string identifier is mapped to a short integer that is
        valid for the lifetime of the list broker instance (each restart of the
        list broker may yield a new mapping). This integer is encoded into the
        highest 4 bits of list IDs, so each list is automatically tagged with
        context information. There can be up to 16 different contexts, which is
        much more than needed at the time of writing.

        Users of list brokers are free to entirely ignore any context
        information, but they may also make use of them to treat list items
        depending on context (user-visible changes, stream queuing behavior,
        changes in user interface structure, etc.).

        \param out_contexts
            The current map of contexts. The array maps numeric context IDs to
            string tuples, where context IDs are equivalent to array indexes.
            The first string of each tuple is a string ID for the context. The
            second string is a descriptive string for displaying purposes.
        \param proxy, cancellable, error GDBus clutter.
        -->
        <method name="GetListContexts">
            <arg name="contexts" type="a(ss)" direction="out"/>
        </method>

        <!--
        Retrieve range of list items.

        Partial lists can be read out over D-Bus using a triple of list ID,
        first index in that list, and the maximum number of items to return.
        The method returns
        1. an error code;
        2. the index of the first entry in the list; and
        3. the requested items as an array of tuples containing
          1. the displayable item text (UTF-8); and
          2. a byte that indicates the item kind. Check file
             de_tahifi_lists_item_kinds.h for possible values and their
             documentation.

        Item ID 0 always denotes the first entry in a list. A maximum number of
        0 indicates that all items in the list should be sent.

        List IDs are opaque non-zero identifiers managed internally by list
        brokers. No application shall make any assumptions about these IDs,
        except maybe that they are probably completely random numbers and that
        ID 0 is invalid. Only IDs retured by \c GetListId can be used safely to
        invoke this method. In case an invalid list ID is used in an
        invokation, the returned error code will be set accordingly.

        The method may take a rather long time to generate an answer in case
        the list contents have to be fetched over a network. If such a blocking
        behavior is not acceptable in some situation, then the \c CheckRange
        method should be called beforehand.

        \note Lists may become outdated over time in which case the
              \c ListInvalidate signal is sent.

        \param arg_list_id
            Identifier of the list whose items should be retrieved.
        \param arg_first_item_id
            Identifier of the first item in the list to be returned.
        \param arg_count
            Maximum number of list items to return.
        \param out_error_code
            The D-Bus method returns an error code to the caller. Check file
            de_tahifi_lists_errors.h or de_tahifi_lists_errors.hh for possible
            values and their documentation.
        \param out_first_item
            ID of the first item in the list. This is basically just a copy of
            the \p arg_first_item_id parameter for the client's convenience (no
            need to remember the requested first item ID).
        \param out_list
            The requested range of list items is returned through this
            parameter. In case \p out_error_code is not 0, the returned list is
            empty.
        \param proxy, cancellable, error GDBus clutter.

        \returns True on success, false on error.
        -->
        <method name="GetRange">
            <arg name="list_id" type="u" direction="in"/>
            <arg name="first_item_id" type="u" direction="in"/>
            <arg name="count" type="u" direction="in"/>
            <arg name="error_code" type="y" direction="out"/>
            <arg name="first_item" type="u" direction="out"/>
            <arg name="list" type="a(sy)" direction="out"/>
        </method>

        <!--
        Retrieve range of list items, including some meta data.

        This method is the same as \c GetRange, but it also sends back the
        artist, album, and title information about a stream if available, in
        this order. In detail, the method returns
        1. an error code;
        2. the index of the first entry in the list; and
        3. the requested items as an array of tuples containing
          1. the name of the artist (UTF-8), if any;
          2. the name of the album (UTF-8), if any;
          3. the name of the title (UTF-8), if any;
          4. a byte between 0 and 2 that indicates which of the strings is the
             natural string to display in a simple list; and
          5. a byte that indicates the item kind. Check file
             de_tahifi_lists_item_kinds.h for possible values and their
             documentation.

        Method \c GetRange is preferable over \c GetRangeWithMetaData for two
        reasons: (1) Meta data is supposed to be extracted from the stream by
        the stream player; and (2) less data is transferred for \c GetRange,
        making it faster. Use this method only for sources for which it makes
        sense to try (e.g., for Airable it would make sense, for USB mass
        storage it wouldn't).

        \param arg_list_id, arg_first_item_id, arg_count, out_error_code,
            out_first_item
            These arguments are the same as for \c GetRange.
        \param out_list
            The requested range of list items is returned through this
            parameter. In case \p out_error_code is not 0, the returned list is
            empty.
        \param proxy, cancellable, error GDBus clutter.
        -->
        <method name="GetRangeWithMetaData">
            <arg name="list_id" type="u" direction="in"/>
            <arg name="first_item_id" type="u" direction="in"/>
            <arg name="count" type="u" direction="in"/>
            <arg name="error_code" type="y" direction="out"/>
            <arg name="first_item" type="u" direction="out"/>
            <arg name="list" type="a(sssyy)" direction="out"/>
        </method>

        <!--
        Check if a range of list items is readily available.

        \param arg_list_id, arg_first_item_id, arg_count, out_error_code,
            out_first_item
            These arguments are the same as for \c GetRange, but this method
            does not block on server side and it returns the number of items
            that would be returned instead of the list itself.
        \param out_number_of_items
            The number of items that would be returned by \c GetRange.
        \param proxy, cancellable, error GDBus clutter.
        -->
        <method name="CheckRange">
            <arg name="list_id" type="u" direction="in"/>
            <arg name="first_item_id" type="u" direction="in"/>
            <arg name="count" type="u" direction="in"/>
            <arg name="error_code" type="y" direction="out"/>
            <arg name="first_item" type="u" direction="out"/>
            <arg name="number_of_items" type="u" direction="out"/>
        </method>

        <!--
        Get list ID for directory-typed list item.

        This method is like an "enter list" operation, expect that nothing is
        really entered at this point; that is, no user interface navigation
        takes place here. Instead, the list broker allocates a list identifier
        for the requested item and may prefetch any data required to populate
        the list. This list identifier is returned to the caller. As long as
        the returned list ID is valid, it can be used to read out list
        contents.

        By sending multiple \c GetListId requests, multiple lists may be
        prefetched in parallel to increase the perceived speed of user
        interface navigation.

        \param arg_list_id, arg_item_id
            List item whose child list ID should be returned. The root list's
            ID is obtained by passing 0 for both \p arg_list_id and
            \p arg_item_id. This can be used as a starting point when no other
            lists are known yet. Consecutive requests must use the returned
            child list ID to reference the root list.
        \param out_error_code
            The D-Bus method returns an error code to the caller. Check file
            de_tahifi_lists_errors.h or de_tahifi_lists_errors.hh for possible
            values and their documentation.
        \param out_child_list_id
            The D-Bus method returns either the requested list ID, or 0 in case
            of an error (e.g., the specified list item does not exist or is not
            a directory).
        \param proxy, cancellable, error GDBus clutter.

        \returns True on success, false on error.
        -->
        <method name="GetListId">
            <arg name="list_id" type="u" direction="in"/>
            <arg name="item_id" type="u" direction="in"/>
            <arg name="error_code" type="y" direction="out"/>
            <arg name="child_list_id" type="u" direction="out"/>
        </method>

        <!--
        Get list ID for list item that requires a parameter to be meaningful.

        This interface is intended to be used with search forms.

        \note This interface is not stable. It should not take one parameter,
              but many. It should not be restricted to strings. There must be a
              way for clients to query a list of parameters and their types
              (strings, integers, multiple/single choice from list, etc.).
              The current situation mandates that we act fast, so this
              interface remains shitty and incomplete for the time being.
        -->
        <method name="GetParameterizedListId">
            <arg name="list_id" type="u" direction="in"/>
            <arg name="item_id" type="u" direction="in"/>
            <arg name="parameter" type="s" direction="in"/>
            <arg name="error_code" type="y" direction="out"/>
            <arg name="child_list_id" type="u" direction="out"/>
        </method>

        <!--
        Get parent list ID and item that links to the given list.

        The use of this method allows clients to be rather stateless and to
        avoid keeping a trail of list IDs around. In addition, the client won't
        have to worry about outdated list IDs when trying to move up a list
        hierarchy.

        \param arg_list_id
            List ID whose parent item is to be determined.
        \param out_parent_list_id, out_parent_item_id
            The specific parent item that links to list ID \p arg_list_id. If
            the parent list does not exist, a value of 0 is returned in both
            \p out_parent_list_id and \p out_parent_item_id. In case the
            \p arg_list_id refers to the root directory, an
            \p out_parent_item_id of 1 is returned to allow distinction between
            erroneous requests and requests from the root directory.
        \param proxy, cancellable, error GDBus clutter.

        \returns True on success, false on error.
        -->
        <method name="GetParentLink">
            <arg name="list_id" type="u" direction="in"/>
            <arg name="parent_list_id" type="u" direction="out"/>
            <arg name="parent_item_id" type="u" direction="out"/>
        </method>

        <!--
        Get list of URIs for given item in given list.

        \param arg_list_id, arg_item_id
            List item whose associated URIs should be returned.
        \param out_error_code
            The D-Bus method returns an error code to the caller. Check file
            de_tahifi_lists_errors.h or de_tahifi_lists_errors.hh for possible
            values and their documentation.
        \param out_uri_list
            An array of strings containing the URI the item refers to. In case
            the item is not associated with any URI (e.g., directory entries),
            an empty string is returned.
        \param out_image_stream_key
            Stream key for retrieval of cover art.
        \param proxy, cancellable, error GDBus clutter.

        \returns True on success, false on error.
        -->
        <method name="GetURIs">
            <arg name="list_id" type="u" direction="in"/>
            <arg name="item_id" type="u" direction="in"/>
            <arg name="error_code" type="y" direction="out"/>
            <arg name="uri_list" type="as" direction="out"/>
            <arg name="image_stream_key" type="ay" direction="out">
                <annotation name="org.gtk.GDBus.C.ForceGVariant" value="arg"/>
            </arg>
        </method>

        <!--
        Get list of ranked links to streams for given item in given list.

        Use this method only for sources for which it makes sense to try (e.g.,
        for Airable it would make sense, for USB mass storage it wouldn't).

        \param arg_list_id, arg_item_id
            List item whose associated URIs should be returned.
        \param out_error_code
            The D-Bus method returns an error code to the caller. Check file
            de_tahifi_lists_errors.h or de_tahifi_lists_errors.hh for possible
            values and their documentation.
        \param out_link_list
            An array of triplets containing the rank (higher is better), the
            bit rate in bits per second, and the URI of the stream link. In
            case the item is not associated with any URI (e.g., directory
            entries), an empty array is returned.
        \param out_image_stream_key
            Stream key for retrieval of cover art.
        \param proxy, cancellable, error GDBus clutter.

        \returns True on success, false on error.
        -->
        <method name="GetRankedStreamLinks">
            <arg name="list_id" type="u" direction="in"/>
            <arg name="item_id" type="u" direction="in"/>
            <arg name="error_code" type="y" direction="out"/>
            <arg name="link_list" type="a(uus)" direction="out"/>
            <arg name="image_stream_key" type="ay" direction="out">
                <annotation name="org.gtk.GDBus.C.ForceGVariant" value="arg"/>
            </arg>
        </method>

        <!--
        Hint that the referenced list is not interesting anymore.

        The list broker may use this as a hint to stop prefetching data,
        discard any list items, or even to remove the entire list from its
        cache. When it decides to do the latter, a \c ListInvalidate signal is
        sent.
        -->
        <method name="DiscardList">
            <arg name="list_id" type="u" direction="in"/>
        </method>

        <!--
        Hint that the referenced lists should be kept around in memory.

        This method marks the lists as recently used and causes them to stay in
        memory for a longer period of time. They will still be garbage
        collected, but later than before this method was invoked.

        \param arg_list_ids
            Lists that whose garbage collection fate shall be deferred.
        \param out_list_expiry_ms
            Number of milliseconds the lists will be excluded from garbage
            collection. This number can be used as a basis for regular keep
            alive method invokations to keep lists around as long as needed. Do
            not use this number directly, but substract some time to account
            for any latencies (using 80% of this value may be appropriate).
        \param out_invalid_list_ids
            In case any lists requested to keep alive are not known anymore,
            their IDs are returned here. Lists may have been removed due to
            memory pressure before their scheduled life time has expired.
        \param proxy, cancellable, error GDBus clutter.
        -->
        <method name="KeepAlive">
            <arg name="list_ids" type="au" direction="in"/>
            <arg name="list_expiry_ms" type="t" direction="out"/>
            <arg name="invalid_list_ids" type="au" direction="out"/>
        </method>>

        <!--
        Indicate that the list with the given list ID cannot be used anymore.

        There are two particular reasons why a list cannot be used anymore,
        indicated in the return value: (1) list content has changed; or (2)
        memory occupied by the list was reclaimed. In case the list content has
        changed, the new list ID is sent along. Item IDs may or may not be
        valid anymore. In case the list was removed, a new list ID of 0 is
        sent.
        -->
        <signal name="ListInvalidate">
            <arg name="list_id" type="u"/>
            <arg name="new_list_id" type="u"/>
        </signal>
    </interface>
</node>
