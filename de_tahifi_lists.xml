<!DOCTYPE node PUBLIC "-//freedesktop//DTD D-BUS Object Introspection 1.0//EN"
 "http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd">
<node name="/de/tahifi/lists">
    <interface name="de.tahifi.Lists.Navigation">
        <!--
        Retrieve a list of contexts known by the list broker.

        List entries always appear in some "context". Each context is
        associated with a unique, short string identifier that clearly defines
        the meaning of the context. These string identifiers are compatible
        with the category identifiers returned by
        \c de.tahifi.Credentials.Read.GetKnownCategories(). In general, the set
        of contexts will be a superset of the set of categories.

        Context information is frequently used, so to keep D-Bus messages
        small, each string identifier is mapped to a short integer that is
        valid for the lifetime of the list broker instance (each restart of the
        list broker may yield a new mapping). This integer is encoded into the
        highest 4 bits of list IDs, so each list is automatically tagged with
        context information. There can be up to 16 different contexts, which is
        much more than needed at the time of writing.

        Users of list brokers are free to entirely ignore any context
        information, but they may also make use of them to treat list items
        depending on context (user-visible changes, stream queuing behavior,
        changes in user interface structure, etc.).

        \param out_contexts
            The current map of contexts. The array maps numeric context IDs to
            string tuples, where context IDs are equivalent to array indexes.
            The first string of each tuple is a string ID for the context. The
            second string is a descriptive string for displaying purposes.
        \param proxy, cancellable, error GDBus clutter.
        -->
        <method name="GetListContexts">
            <arg name="contexts" type="a(ss)" direction="out"/>
        </method>

        <!--
        Retrieve range of list items.

        Partial lists can be read out over D-Bus using a triple of list ID,
        first index in that list, and the maximum number of items to return.
        The method returns
        1. an error code;
        2. the index of the first entry in the list; and
        3. the requested items as an array of tuples containing
          1. the displayable item text (UTF-8); and
          2. a byte that indicates the item kind. Check file
             de_tahifi_lists_item_kinds.h for possible values and their
             documentation.

        Item ID 0 always denotes the first entry in a list. A maximum number of
        0 indicates that all items in the list should be sent.

        List IDs are opaque non-zero identifiers managed internally by list
        brokers. No application shall make any assumptions about these IDs,
        except maybe that they are probably completely random numbers and that
        ID 0 is invalid. Only IDs returned by \c GetListId can be used safely to
        invoke this method. In case an invalid list ID is used in an
        invocation, the returned error code will be set accordingly.

        The method may take a rather long time to generate an answer in case
        the list contents have to be fetched over a network. If such a blocking
        behavior is not acceptable in some situation, then the \c CheckRange
        method should be called beforehand.

        \note Lists may become outdated over time in which case the
              \c ListInvalidate signal is sent.

        \param arg_list_id
            Identifier of the list whose items should be retrieved.
        \param arg_first_item_id
            Identifier of the first item in the list to be returned.
        \param arg_count
            Maximum number of list items to return.
        \param out_error_code
            The D-Bus method returns an error code to the caller. Check file
            de_tahifi_lists_errors.h or de_tahifi_lists_errors.hh for possible
            values and their documentation.
        \param out_first_item
            ID of the first item in the list. This is basically just a copy of
            the \p arg_first_item_id parameter for the client's convenience (no
            need to remember the requested first item ID).
        \param out_list
            The requested range of list items is returned through this
            parameter. In case \p out_error_code is not 0, the returned list is
            empty.
        \param proxy, cancellable, error GDBus clutter.

        \returns True on success, false on error.
        -->
        <method name="GetRange">
            <arg name="list_id" type="u" direction="in"/>
            <arg name="first_item_id" type="u" direction="in"/>
            <arg name="count" type="u" direction="in"/>
            <arg name="error_code" type="y" direction="out"/>
            <arg name="first_item" type="u" direction="out"/>
            <arg name="list" type="a(sy)" direction="out"/>
        </method>

        <!--
        Retrieve range of list items, including some meta data.

        This method is the same as \c GetRange, but it also sends back the
        artist, album, and title information about a stream if available, in
        this order. In detail, the method returns
        1. an error code;
        2. the index of the first entry in the list; and
        3. the requested items as an array of tuples containing
          1. the name of the artist (UTF-8), if any;
          2. the name of the album (UTF-8), if any;
          3. the name of the title (UTF-8), if any;
          4. a byte between 0 and 2 that indicates which of the strings is the
             natural string to display in a simple list; and
          5. a byte that indicates the item kind. Check file
             de_tahifi_lists_item_kinds.h for possible values and their
             documentation.

        Method \c GetRange is preferable over \c GetRangeWithMetaData for two
        reasons: (1) Meta data is supposed to be extracted from the stream by
        the stream player; and (2) less data is transferred for \c GetRange,
        making it faster. Use this method only for sources for which it makes
        sense to try (e.g., for Airable it would make sense, for USB mass
        storage it wouldn't).

        \param arg_list_id, arg_first_item_id, arg_count, out_error_code,
            out_first_item
            These arguments are the same as for \c GetRange.
        \param out_list
            The requested range of list items is returned through this
            parameter. In case \p out_error_code is not 0, the returned list is
            empty.
        \param proxy, cancellable, error GDBus clutter.
        -->
        <method name="GetRangeWithMetaData">
            <arg name="list_id" type="u" direction="in"/>
            <arg name="first_item_id" type="u" direction="in"/>
            <arg name="count" type="u" direction="in"/>
            <arg name="error_code" type="y" direction="out"/>
            <arg name="first_item" type="u" direction="out"/>
            <arg name="list" type="a(sssyy)" direction="out"/>
        </method>

        <!--
        Check if a range of list items is readily available.

        \param arg_list_id, arg_first_item_id, arg_count, out_error_code,
            out_first_item
            These arguments are the same as for \c GetRange, but this method
            does not block on server side and it returns the number of items
            that would be returned instead of the list itself.
        \param out_number_of_items
            The number of items that would be returned by \c GetRange.
        \param proxy, cancellable, error GDBus clutter.
        -->
        <method name="CheckRange">
            <arg name="list_id" type="u" direction="in"/>
            <arg name="first_item_id" type="u" direction="in"/>
            <arg name="count" type="u" direction="in"/>
            <arg name="error_code" type="y" direction="out"/>
            <arg name="first_item" type="u" direction="out"/>
            <arg name="number_of_items" type="u" direction="out"/>
        </method>

        <!--
        Get list ID for directory-typed list item.

        This method is like an "enter list" operation, expect that nothing is
        really entered at this point; that is, no user interface navigation
        takes place here. Instead, the list broker allocates a list identifier
        for the requested item and may prefetch any data required to populate
        the list. This list identifier is returned to the caller. As long as
        the returned list ID is valid, it can be used to read out list
        contents.

        By sending multiple \c GetListId requests, multiple lists may be
        prefetched in parallel to increase the perceived speed of user
        interface navigation.

        \param arg_list_id, arg_item_id
            List item whose child list ID should be returned. The root list's
            ID is obtained by passing 0 for both \p arg_list_id and
            \p arg_item_id. This can be used as a starting point when no other
            lists are known yet. Consecutive requests must use the returned
            child list ID to reference the root list.
        \param out_error_code
            The D-Bus method returns an error code to the caller. Check file
            de_tahifi_lists_errors.h or de_tahifi_lists_errors.hh for possible
            values and their documentation.
        \param out_child_list_id
            The D-Bus method returns either the requested list ID, or 0 in case
            of an error (e.g., the specified list item does not exist or is not
            a directory).
        \param out_list_title
            Name of the list (UTF-8).
        \param out_list_title_translatable
            True if the string in \p out_list_title is subject to i18n within
            the UI, false if the string shall be displayed as is.
        \param proxy, cancellable, error GDBus clutter.

        \returns True on success, false on error.
        -->
        <method name="GetListId">
            <arg name="list_id" type="u" direction="in"/>
            <arg name="item_id" type="u" direction="in"/>
            <arg name="error_code" type="y" direction="out"/>
            <arg name="child_list_id" type="u" direction="out"/>
            <arg name="list_title" type="s" direction="out"/>
            <arg name="list_title_translatable" type="b" direction="out"/>
        </method>

        <!--
        Get list ID for list item that requires a parameter to be meaningful.

        This interface is intended to be used with search forms.

        \note This interface is not stable. It should not take one parameter,
              but many. It should not be restricted to strings. There must be a
              way for clients to query a list of parameters and their types
              (strings, integers, multiple/single choice from list, etc.).
              The current situation mandates that we act fast, so this
              interface remains shitty and incomplete for the time being.
        -->
        <method name="GetParameterizedListId">
            <arg name="list_id" type="u" direction="in"/>
            <arg name="item_id" type="u" direction="in"/>
            <arg name="parameter" type="s" direction="in"/>
            <arg name="error_code" type="y" direction="out"/>
            <arg name="child_list_id" type="u" direction="out"/>
            <arg name="list_title" type="s" direction="out"/>
            <arg name="list_title_translatable" type="b" direction="out"/>
        </method>

        <!--
        Get parent list ID and item that links to the given list.

        The use of this method allows clients to be rather stateless and to
        avoid keeping a trail of list IDs around. In addition, the client won't
        have to worry about outdated list IDs when trying to move up a list
        hierarchy.

        \param arg_list_id
            List ID whose parent item is to be determined.
        \param out_parent_list_id, out_parent_item_id
            The specific parent item that links to list ID \p arg_list_id. If
            the parent list does not exist, a value of 0 is returned in both
            \p out_parent_list_id and \p out_parent_item_id. In case the
            \p arg_list_id refers to the root directory, an
            \p out_parent_item_id of 1 is returned to allow distinction between
            erroneous requests and requests from the root directory.
        \param out_list_title
            Name of the list (UTF-8).
        \param out_list_title_translatable
            True if the string in \p out_list_title is subject to i18n within
            the UI, false if the string shall be displayed as is.
        \param proxy, cancellable, error GDBus clutter.

        \returns True on success, false on error.
        -->
        <method name="GetParentLink">
            <arg name="list_id" type="u" direction="in"/>
            <arg name="parent_list_id" type="u" direction="out"/>
            <arg name="parent_item_id" type="u" direction="out"/>
            <arg name="list_title" type="s" direction="out"/>
            <arg name="list_title_translatable" type="b" direction="out"/>
        </method>

        <!--
        Get parent list ID and item that links to the given context.

        The list linked to corresponds to the root list for the requested
        context. There are two reasons why this function returns a link instead
        of a direct list ID: (1) permissions and related error handling, and
        (2) performance.

        If we would return a direct list ID, then this method would work more
        like \c de.tahifi.Lists.Navigation.GetListId(). This, however, would
        imply performing the same operations as that function performs.
        Specifically, it would mean this method would actually have to open the
        list, implying a quite notable performance hit. Also, in case the
        context requires some kind of login, the login procedure may fail and
        the follow-up error handling in client code would be more complicated
        than necessary (it would duplicate the handling required for
        \c GetListId()).

        For these reasons, this method (and its output) is more like
        \c de.tahifi.Lists.Navigation.GetParentLink(). A robust implementation
        of calls of \c GetListId() in client code can be reused and will be
        able to make a much better job at error handling, plus the performance
        hit is only taken when necessary.
        -->
        <method name="GetRootLinkToContext">
            <arg name="context" type="s" direction="in"/>
            <arg name="parent_list_id" type="u" direction="out"/>
            <arg name="parent_item_id" type="u" direction="out"/>
            <arg name="list_title" type="s" direction="out"/>
            <arg name="list_title_translatable" type="b" direction="out"/>
        </method>

        <!--
        Get list of URIs for given item in given list.

        \param arg_list_id, arg_item_id
            List item whose associated URIs should be returned.
        \param out_error_code
            The D-Bus method returns an error code to the caller. Check file
            de_tahifi_lists_errors.h or de_tahifi_lists_errors.hh for possible
            values and their documentation.
        \param out_uri_list
            An array of strings containing the URI the item refers to. In case
            the item is not associated with any URI (e.g., directory entries),
            an empty string is returned.
        \param out_image_stream_key
            Stream key for retrieval of cover art.
        \param proxy, cancellable, error GDBus clutter.

        \returns True on success, false on error.
        -->
        <method name="GetURIs">
            <arg name="list_id" type="u" direction="in"/>
            <arg name="item_id" type="u" direction="in"/>
            <arg name="error_code" type="y" direction="out"/>
            <arg name="uri_list" type="as" direction="out"/>
            <arg name="image_stream_key" type="ay" direction="out">
                <annotation name="org.gtk.GDBus.C.ForceGVariant" value="arg"/>
            </arg>
        </method>

        <!--
        Get list of ranked links to streams for given item in given list.

        Use this method only for sources for which it makes sense to try (e.g.,
        for Airable it would make sense, for USB mass storage it wouldn't).

        \param arg_list_id, arg_item_id
            List item whose associated URIs should be returned.
        \param out_error_code
            The D-Bus method returns an error code to the caller. Check file
            de_tahifi_lists_errors.h or de_tahifi_lists_errors.hh for possible
            values and their documentation.
        \param out_link_list
            An array of triplets containing the rank (higher is better), the
            bit rate in bits per second, and the URI of the stream link. In
            case the item is not associated with any URI (e.g., directory
            entries), an empty array is returned.
        \param out_image_stream_key
            Stream key for retrieval of cover art.
        \param proxy, cancellable, error GDBus clutter.

        \returns True on success, false on error.
        -->
        <method name="GetRankedStreamLinks">
            <arg name="list_id" type="u" direction="in"/>
            <arg name="item_id" type="u" direction="in"/>
            <arg name="error_code" type="y" direction="out"/>
            <arg name="link_list" type="a(uus)" direction="out"/>
            <arg name="image_stream_key" type="ay" direction="out">
                <annotation name="org.gtk.GDBus.C.ForceGVariant" value="arg"/>
            </arg>
        </method>

        <!--
        Hint that the referenced list is not interesting anymore.

        The list broker may use this as a hint to stop prefetching data,
        discard any list items, or even to remove the entire list from its
        cache. When it decides to do the latter, a \c ListInvalidate signal is
        sent.
        -->
        <method name="DiscardList">
            <arg name="list_id" type="u" direction="in"/>
        </method>

        <!--
        Hint that the referenced lists should be kept around in memory.

        This method marks the lists as recently used and causes them to stay in
        memory for a longer period of time. They will still be garbage
        collected, but later than before this method was invoked.

        \param arg_list_ids
            Lists that whose garbage collection fate shall be deferred.
        \param out_list_expiry_ms
            Number of milliseconds the lists will be excluded from garbage
            collection. This number can be used as a basis for regular keep
            alive method invocations to keep lists around as long as needed. Do
            not use this number directly, but subtract some time to account
            for any latencies (using 80% of this value may be appropriate).
        \param out_invalid_list_ids
            In case any lists requested to keep alive are not known anymore,
            their IDs are returned here. Lists may have been removed due to
            memory pressure before their scheduled life time has expired.
        \param proxy, cancellable, error GDBus clutter.
        -->
        <method name="KeepAlive">
            <arg name="list_ids" type="au" direction="in"/>
            <arg name="list_expiry_ms" type="t" direction="out"/>
            <arg name="invalid_list_ids" type="au" direction="out"/>
        </method>>

        <!--
        Temporarily force caching of lists, even those which must never be
        cached.

        This is useful for players that wish to traverse through the list
        hierarchy to generate a playlist on the fly. Normally, whenever a list
        further up the hierarchy is accessed, the hierarchy that is currently
        traversed gets purged, so a player would have a very hard time to
        re-sync with the replaced hierarchy.

        To avoid these complexities, whole subtrees can be forced to stay in
        cache. It is enough to call this method for the root of some subtree,
        even if this root is cacheable. Any non-cacheable lists encountered
        deeper below that root are automatically kept in cache. When the caller
        is done with the subtree, it should call this method again with the
        \p arg_force parameter set to \c false to revert the subtree lists to
        their default behavior.

        This method may be called multiple times for different list IDs, each
        of which individually overriding caching behavior of the corresponding
        subtrees. This is also true for an ID in a subtree whose default
        caching behavior has been modified already. In this case, if the upper
        list is reverted to default behavior, then the list deeper down the
        subtree may still override caching; if the list deeper down is reverted
        to default, the upper list may keep that list in overridden state.

        Even though it is possible to pass the list broker's root list in
        \p arg_list_id to keep everything in cache, this should be avoided. It
        is better to restrict enforced caching to only those subtrees needed by
        the caller (say, a player), allowing to keep the rest of the list
        hierarchy working in the expected way (say, for list browsing while
        playing).

        The effect of this method lasts until a timeout expires. The expiry
        time is returned in the \p out_list_expiry_ms parameter. To keep the
        subtree in cache, this method must be called again before the timeout
        expires (similar to the \c de.tahifi.Lists.Navigation.KeepAlive
        method). Note that this method is independent of and completely
        orthogonal to the \c de.tahifi.Lists.Navigation.KeepAlive method. That
        is, even if a subtree is forced to stay in cache, it is still subject
        to garbage collection. Regular keep-alive calls are necessary in
        addition to regular force-in-cache calls to avoid this.

        \param arg_list_id
            Root of the subtree which should be cached.

        \param arg_force
            Pass \c true to force given subtree to stay in cache.
            Pass \c false to revert the default caching mode defined for the
            list. Note that passing \c false will not force a cached list to
            become a non-cacheable one. Either the list is reverted to
            non-cacheable mode if this is its default mode, or it remains a
            cacheable list if this is its default.

        \param out_list_expiry_ms
            Timeout after which the caching mode of the subtree nodes is
            reverted to their defaults. This timeout is used as a safety
            measure against race conditions or bugs in callers, both of which
            may cause removal of the enforced caching.

        \param proxy, cancellable, error
            GDBus clutter.
        -->
        <method name="ForceInCache">
            <arg name="list_id" type="u" direction="in"/>
            <arg name="force" type="b" direction="in"/>
            <arg name="list_expiry_ms" type="t" direction="out"/>
        </method>>

        <!--
        Get a string key which defines a location in the list hierarchy.

        The string returned is a location key, i.e., a URL following one of the
        resource locator schemes (either a simple scheme or a reference
        scheme). It can be used in playlists or can be passed to the smartphone
        app so that it can have a deeper understanding of what exactly the
        appliance is currently playing.

        \param arg_list_id, arg_item_id
            Location for which a location key shall be generated.

        \param arg_as_reference_key
            If false, then a simple-scheme location key is returned; otherwise,
            a reference-scheme location key is returned.

        \param out_error_code
            The D-Bus method returns an error code to the caller. Check file
            de_tahifi_lists_errors.h or de_tahifi_lists_errors.hh for possible
            values and their documentation.

        \param out_location_key
            The generated location key.

        \param proxy, cancellable, error
            GDBus clutter.
        -->
        <method name="GetLocationKey">
            <arg name="list_id" type="u" direction="in"/>
            <arg name="item_id" type="u" direction="in"/>
            <arg name="as_reference_key" type="b" direction="in"/>
            <arg name="error_code" type="y" direction="out"/>
            <arg name="location_key" type="s" direction="out"/>
        </method>

        <!--
        Get a string which defines a trace through the list hierarchy.

        This method is needed for resuming playback after a power cycle or for
        passing playback state to the smartphone app.

        The player is supposed to retrieve a location trace when the currently
        playing stream changes. Each time the user actively selects a location
        to play (any point in a list hierarchy, stream or list), the player
        stores the selected point (list ID/item ID) as reference point.
        Starting from the reference point, the list crawler searches for
        streams and passes them one by one to the stream player. Every time the
        stream player reports that a stream has started playing, a location
        trace to that stream must be generated. This location trace contains
        all that is needed to reconstruct the list crawler's internal state so
        that it can resume its work from the location last played, even after a
        system crash or a power cycle.

        It might be a good idea to call this method asynchronously. The method
        is supposed to be fast, but there are no guarantees across the various
        list brokers. Usually, the location trace is not needed in the place it
        is requested anyway, so an asynchronous call seems well-suited in most
        situations.

        \param arg_list_id, arg_item_id
            Location of the referenced resource. It must be located in the
            subtree below the reference point; it cannot be the reference point
            itself.

        \param arg_ref_list_id, arg_ref_item_id
            Reference point. If both values are zero, then a full trace to the
            root list is generated.

        \param out_error_code
            The D-Bus method returns an error code to the caller. Check file
            de_tahifi_lists_errors.h or de_tahifi_lists_errors.hh for possible
            values and their documentation.

        \param out_location_trace
            The generated location trace.

        \param proxy, cancellable, error
            GDBus clutter.

        \see #tdbus_lists_navigation_call_realize_location()
        -->
        <method name="GetLocationTrace">
            <arg name="list_id" type="u" direction="in"/>
            <arg name="item_id" type="u" direction="in"/>
            <arg name="ref_list_id" type="u" direction="in"/>
            <arg name="ref_item_id" type="u" direction="in"/>
            <arg name="error_code" type="y" direction="out"/>
            <arg name="location_trace" type="s" direction="out"/>
        </method>

        <!--
        Get list ID and item ID for given location key or location trace.

        Resolving locations (especially long location traces which involve many
        network accesses) can take quite a long time to finish on networked
        lists. To avoid running into D-Bus timeouts in case of sluggish network
        or server performance, this method returns an access token and reports
        its results via the \c RealizeLocationResult signal when done.

        Since this method starts location realization in the background, it
        will return fast, making it suitable to synchronous invocation.
        Asynchronous retrieval of the result is always enforced by API design.

        Note: USB devices can be slow, too...

        \param arg_location_url
            A location key or location trace with protocol specification
            matching the list broker.

        \param out_error_code
            The method may error out early with an error code. In this case, no
            \c RealizeLocationResult signal will be emitted. Check file
            de_tahifi_lists_errors.h or de_tahifi_lists_errors.hh for possible
            values and their documentation.

        \param out_cookie
            A random, non-zero value used to figure out which query the result
            signal belongs to.

        \param proxy, cancellable, error
            GDBus clutter.

        \see #tdbus_lists_navigation_call_get_location_key()
        \see #tdbus_lists_navigation_call_get_location_trace()
        \see #tdbus_lists_navigation_call_abort_realize_location_sync()
        \see #tdbus_lists_navigation_emit_realize_location_result()
        -->
        <method name="RealizeLocation">
            <arg name="location_url" type="s" direction="in"/>
            <arg name="error_code" type="y" direction="out"/>
            <arg name="cookie" type="u" direction="out"/>
        </method>

        <!--
        Stop realizing a location key/trace if result is not needed anymore.

        The method returns successfully in case the realization process was
        aborted before the result has been delivered. In this case, however,
        the \c RealizeLocationResult signal will still be emitted indicating
        abortion via error code.

        If there is no ongoing realization operation which matches the given
        cookie the time the method is invoked, then a D-Bus error is returned.

        \note
            Even in case of error, it is still possible for the
            \c RealizeLocationResult signal to be emitted, with or without an
            error. This will happen in case the abort command was processed
            after the trace has been completed and the corresponding signal has
            been emitted, but before the caller has received the signal. This
            is not an error, but an unavoidable race condition that any caller
            must be able to detect and handle gracefully.

        \see #tdbus_lists_navigation_call_realize_location()
        -->
        <method name="AbortRealizeLocation">
            <arg name="cookie" type="u" direction="in"/>
        </method>

        <!--
        Deliver result of resolution of a location trace.

        On success, the result is essentially the location of the resource
        specified by the query URL, plus the reference list in case the query
        was a location trace.

        \note
            Obtaining the parent of the reference list is a supported
            operation, but the result is broker-specific. The parent list ID
            may always be returned as invalid, always refer to the root list,
            or refer to any list somewhere in the list broker's hierarchy.
            These broker-specific behaviors (which are well-defined for each
            list broker) may be exploited to implement useful special cases,
            but a generic client of this API should not try to access the
            parent of the reference list.

        \param arg_cookie
            The value returned by \c RealizeLocation().

        \param arg_error_code
            The D-Bus method returns an error code to the caller. Check file
            de_tahifi_lists_errors.h or de_tahifi_lists_errors.hh for possible
            values and their documentation.

        \param arg_list_id, arg_item_id
            The ID of the list which contains the item specified by the
            location key or location trace, and its position within its
            containing list. In case of error, the position of the deepest
            successfully resolved item is returned here; both values are 0 if
            realizing a location fails early.

        \param arg_ref_list_id
            This parameter is zero if the input was a location key. In case the
            input was a location trace, the ID of the reference list is
            returned through this parameter. The ID will be filled in even in
            case of error if the reference list was found before an error
            occurred on the path to the destination resource.

        \param arg_ref_item_id
            Position of the first item within the reference list on the path to
            the destination resource. In case of error, this value will be
            2^32-1, but it may also be filled in even in case of error (similar
            to \p arg_ref_list_id).

        \param arg_distance
            Distance of the list returned in \p arg_list_id from the reference
            list (relative depth). This value is non-zero if the IDs returned
            for the two lists are both valid and not equal. This is also true
            in case of error.

        \param arg_trace_length
            If the query was a location trace, then the length of the trace
            specified by the location trace is returned through this parameter.
            This value can be used to determine the point of failure in trace
            realization.  On successful trace realization, \p arg_distance will
            be positive and equal to this parameter. This value is always 0 for
            location key queries.

        \param arg_list_title
            Name of the list referenced by \p arg_list_id (UTF-8).

        \param arg_list_title_translatable
            True if the string in \p arg_list_title is subject to i18n within
            the UI, false if the string shall be displayed as is.

        \param object
            GDBus clutter.

        \see #tdbus_lists_navigation_call_realize_location()
        -->
        <signal name="RealizeLocationResult">
            <arg name="cookie" type="u"/>
            <arg name="error_code" type="y"/>
            <arg name="list_id" type="u"/>
            <arg name="item_id" type="u"/>
            <arg name="ref_list_id" type="u"/>
            <arg name="ref_item_id" type="u"/>
            <arg name="distance" type="u"/>
            <arg name="trace_length" type="u"/>
            <arg name="list_title" type="s"/>
            <arg name="list_title_translatable" type="b"/>
        </signal>

        <!--
        Indicate that the list with the given list ID cannot be used anymore.

        There are two particular reasons why a list cannot be used anymore,
        indicated in the return value: (1) list content has changed; or (2)
        memory occupied by the list was reclaimed. In case the list content has
        changed, the new list ID is sent along. Item IDs may or may not be
        valid anymore. In case the list was removed, a new list ID of 0 is
        sent.
        -->
        <signal name="ListInvalidate">
            <arg name="list_id" type="u"/>
            <arg name="new_list_id" type="u"/>
        </signal>
    </interface>
</node>
